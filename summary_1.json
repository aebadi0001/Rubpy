{
  "modules": [
    {
      "module": "rubpy.__init__",
      "doc": "",
      "variables": [
        {
          "name": "__author__",
          "value_repr": "'Rubpy Project'",
          "comments": []
        },
        {
          "name": "__version__",
          "value_repr": "'7.1.2'",
          "comments": []
        },
        {
          "name": "__license__",
          "value_repr": "'GNU Lesser General Public License v3 (LGPLv3)'",
          "comments": []
        },
        {
          "name": "__welcome__",
          "value_repr": "f'Welcome to Rubpy (version {__version__})\\nRubpy is free software and comes with ABSOLUTELY NO WARRANTY. Licensed\\nunder the terms of the {__license__}.\\n\\n'",
          "comments": []
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "module": "rubpy.client",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Client",
          "bases": [
            "Methods"
          ],
          "doc": "کلاینت اصلی برای تعامل با API روبیکا.",
          "comments": [],
          "class_attributes": [
            {
              "name": "DEFAULT_PLATFORM",
              "value_repr": "{'app_name': 'Main', 'app_version': '2.4.6', 'platform': 'PWA', 'package': 'm.rubika.ir'}",
              "comments": []
            },
            {
              "name": "USER_AGENT",
              "value_repr": "'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36'",
              "comments": []
            },
            {
              "name": "API_VERSION",
              "value_repr": "'6'",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "Union[str, StringSession]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "auth",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "private_key",
                  "annotation": "Optional[Union[str, bytes]]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "bot_token",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "phone_number",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "user_agent",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "timeout",
                  "annotation": "Union[str, int, float]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "lang_code",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "parse_mode",
                  "annotation": "Optional[Literal['html', 'markdown', 'mk']]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "proxy",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "logger",
                  "annotation": "Optional[logging.Logger]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "display_welcome",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "platform",
                  "annotation": "Literal['Web', 'Android']",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "max_retries",
                  "annotation": "int",
                  "default": "None"
                }
              ],
              "return_annotation": "None",
              "doc": "مقداردهی اولیه کلاینت روبیکا.\n\nپارامترها:\n- name: نام یا مسیر فایل سشن (str) یا نمونه StringSession.\n- auth: کلید احراز هویت (اختیاری).\n- private_key: کلید خصوصی RSA (اختیاری، رشته یا بایت).\n- bot_token: توکن ربات (اختیاری).\n- phone_number: شماره تلفن (اختیاری).\n- user_agent: رشته User-Agent (اختیاری، پیش‌فرض مرورگر کروم).\n- timeout: زمان انتظار درخواست‌ها (ثانیه، پیش‌فرض 20).\n- lang_code: کد زبان (پیش‌فرض 'fa').\n- parse_mode: حالت تجزیه پیام (html، markdown، mk یا None).\n- proxy: آدرس پروکسی (مثال: 'http://127.0.0.1:80').\n- logger: شیء Logger برای لاگ‌گیری (اختیاری).\n- display_welcome: نمایش پیام خوش‌آمدگویی (پیش‌فرض False).\n- platform: پلتفرم کلاینت ('Web' یا 'Android').\n\nخطاها:\n- ValueError: در صورت نامعتبر بودن ورودی‌ها.\n- TypeError: در صورت نادرست بودن نوع name.",
              "comments": []
            },
            {
              "name": "__enter__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "'Client'",
              "doc": "پشتیبانی از context manager برای شروع کلاینت.",
              "comments": []
            },
            {
              "name": "__exit__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "پشتیبانی از context manager برای قطع اتصال.",
              "comments": []
            },
            {
              "name": "__aenter__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "'Client'",
              "doc": "پشتیبانی از async context manager برای شروع کلاینت.",
              "comments": []
            },
            {
              "name": "__aexit__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "پشتیبانی از async context manager برای قطع اتصال.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.filters",
      "doc": "",
      "variables": [
        {
          "name": "__all__",
          "value_repr": "['Operator', 'BaseModel', 'author_guids', 'object_guids', 'commands', 'regex', 'AuthorGuids', 'ObjectGuids', 'Commands', 'RegexModel']",
          "comments": [
            "لیست عناصر عمومی برای export"
          ]
        },
        {
          "name": "__models__",
          "value_repr": "['is_pinned', 'is_mute', 'count_unseen', 'message_id', 'is_group', 'is_private', 'is_channel', 'is_in_contact', 'text', 'original_update', 'object_guid', 'author_guid', 'time', 'reply_message_id', 'is_me', 'is_forward', 'is_text', 'music', 'file', 'photo', 'sticker', 'video', 'voice', 'contact', 'location', 'poll', 'gif', 'is_event']",
          "comments": [
            "لیست مدل‌های داخلی"
          ]
        }
      ],
      "classes": [
        {
          "name": "Operator",
          "bases": [],
          "doc": "کلاس برای تعریف عملگرهای استفاده‌شده در فیلترهای مدل‌ها.",
          "comments": [],
          "class_attributes": [
            {
              "name": "Or",
              "value_repr": "'OR'",
              "comments": []
            },
            {
              "name": "And",
              "value_repr": "'AND'",
              "comments": []
            },
            {
              "name": "Less",
              "value_repr": "'Less'",
              "comments": []
            },
            {
              "name": "Lesse",
              "value_repr": "'Lesse'",
              "comments": []
            },
            {
              "name": "Equal",
              "value_repr": "'Equal'",
              "comments": []
            },
            {
              "name": "Greater",
              "value_repr": "'Greater'",
              "comments": []
            },
            {
              "name": "Greatere",
              "value_repr": "'Greatere'",
              "comments": []
            },
            {
              "name": "Inequality",
              "value_repr": "'Inequality'",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "operator",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "__eq__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "",
              "comments": []
            }
          ]
        },
        {
          "name": "BaseModel",
          "bases": [],
          "doc": "کلاس پایه برای مدل‌های سفارشی.\n\nپارامترها:\n- func: تابع فیلتر (اختیاری).\n- filters: لیست یا تک فیلتر برای اعمال.\n- kwargs: آرگومان‌های اضافی.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "func",
                  "annotation": "Optional[callable]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "filters",
                  "annotation": "Union[Any, List[Any]]",
                  "default": "None"
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "insert",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "filter",
                  "annotation": "'Operator'",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "اضافه کردن فیلتر به لیست فیلترها.",
              "comments": []
            },
            {
              "name": "__or__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "__and__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "__eq__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "",
              "comments": []
            },
            {
              "name": "__ne__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "",
              "comments": []
            },
            {
              "name": "__lt__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "__le__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "__gt__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "__ge__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "'BaseModel'",
              "doc": "",
              "comments": []
            },
            {
              "name": "build",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "ساخت و اجرای فیلترها روی آپدیت.\n\nپارامترها:\n- update: شیء آپدیت برای بررسی.\n\nخروجی:\nTrue اگر فیلترها با موفقیت اعمال شوند، در غیر این صورت False.",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "اجرای مدل روی آپدیت.",
              "comments": []
            }
          ]
        },
        {
          "name": "commands",
          "bases": [
            "BaseModel"
          ],
          "doc": "فیلتر برای دستورات در پیام‌های متنی.\n\nپارامترها:\n- commands: دستور یا لیست دستورات (رشته یا لیست رشته‌ها).\n- prefixes: پیشوند یا لیست پیشوندها (پیش‌فرض '/').\n- case_sensitive: حساسیت به حروف بزرگ و کوچک (پیش‌فرض False).",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "'/'"
                },
                {
                  "kind": "arg",
                  "name": "commands",
                  "annotation": "Union[str, List[str]]",
                  "default": "'/'"
                },
                {
                  "kind": "arg",
                  "name": "prefixes",
                  "annotation": "Union[str, List[str]]",
                  "default": "'/'"
                },
                {
                  "kind": "arg",
                  "name": "case_sensitive",
                  "annotation": "bool",
                  "default": "'/'"
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی دستورات در متن آپدیت.",
              "comments": []
            }
          ]
        },
        {
          "name": "regex",
          "bases": [
            "BaseModel"
          ],
          "doc": "فیلتر برای تطبیق متن با عبارات منظم.\n\nپارامترها:\n- pattern: الگوی عبارت منظم.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "pattern",
                  "annotation": "Union[str, Pattern]",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "تطبیق متن آپدیت با الگوی عبارت منظم.",
              "comments": []
            }
          ]
        },
        {
          "name": "object_guids",
          "bases": [
            "BaseModel"
          ],
          "doc": "فیلتر بر اساس GUIDهای شیء.\n\nپارامترها:\n- args: GUID یا لیست/تاپل GUIDها.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی وجود GUID شیء در آپدیت.",
              "comments": []
            }
          ]
        },
        {
          "name": "author_guids",
          "bases": [
            "BaseModel"
          ],
          "doc": "فیلتر بر اساس GUIDهای نویسنده.\n\nپارامترها:\n- args: GUID یا لیست/تاپل GUIDها.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی وجود GUID نویسنده در آپدیت.",
              "comments": []
            }
          ]
        },
        {
          "name": "Models",
          "bases": [],
          "doc": "کلاس برای مدیریت و ایجاد مدل‌های خاص.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__eq__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "object",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی برابری با کلاس پایه مدل‌ها.",
              "comments": []
            },
            {
              "name": "__dir__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "List[str]",
              "doc": "دریافت لیست مدل‌های مجاز.",
              "comments": []
            },
            {
              "name": "__call__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "Type['BaseModel']",
              "doc": "فراخوانی مدل بر اساس نام.",
              "comments": []
            },
            {
              "name": "__getattr__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Type['BaseModel']",
              "doc": "دریافت مدل دینامیک بر اساس نام.",
              "comments": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "create_model",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "name",
              "annotation": "str",
              "default": "__models__"
            },
            {
              "kind": "arg",
              "name": "base",
              "annotation": "tuple",
              "default": "__models__"
            },
            {
              "kind": "arg",
              "name": "authorize",
              "annotation": "List[str]",
              "default": "__models__"
            },
            {
              "kind": "arg",
              "name": "exception",
              "annotation": "bool",
              "default": "__models__"
            },
            {
              "kind": "**kwargs",
              "name": "kwargs",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "Optional[Type['BaseModel']]",
          "doc": "ایجاد دینامیک یک مدل بر اساس نام و کلاس پایه.\n\nپارامترها:\n- name: نام مدل.\n- base: کلاس پایه برای مدل.\n- authorize: لیست نام‌های مدل‌های مجاز.\n- exception: آیا در صورت غیرمجاز بودن مدل خطا پرتاب شود.\n- kwargs: آرگومان‌های اضافی برای تنظیم کلاس.\n\nخروجی:\nکلاس مدل ایجادشده یا None در صورت غیرمجاز بودن.\n\nخطاها:\n- AttributeError: اگر مدل غیرمجاز باشد و exception=True.",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.exceptions",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ClientError",
          "bases": [
            "Exception"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "StopHandler",
          "bases": [
            "ClientError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "APIException",
          "bases": [
            "Exception"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "CancelledError",
          "bases": [
            "ClientError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "RequestError",
          "bases": [
            "ClientError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "message",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "request",
                  "annotation": "",
                  "default": "None"
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        },
        {
          "name": "UploadError",
          "bases": [
            "Exception"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "status",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "status_det",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "dev_message",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        },
        {
          "name": "CodeIsUsed",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "TooRequests",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "InvalidAuth",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ServerError",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "UrlNotFound",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorAction",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorIgnore",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorGeneric",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "NoConnection",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "InvalidInput",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "Undeliverable",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "NotRegistered",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "CodeIsExpired",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "InvalidMethod",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "UsernameExist",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorTryAgain",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorMessageTry",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "InternalProblem",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ErrorMessageIgn",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "NotSupportedApiVersion",
          "bases": [
            "RequestError"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "NetworkError",
          "bases": [
            "Exception"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        },
        {
          "name": "ExcetionsHandler",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__getattr__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "__call__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.handlers",
      "doc": "",
      "variables": [
        {
          "name": "AUTHORIZED_HANDLERS",
          "value_repr": "['ChatUpdates', 'MessageUpdates', 'ShowActivities', 'ShowNotifications', 'RemoveNotifications']",
          "comments": [
            "لیست handlerهای مجاز"
          ]
        }
      ],
      "classes": [
        {
          "name": "BaseHandlers",
          "bases": [
            "Update"
          ],
          "doc": "کلاس پایه برای handlerهای سفارشی.\n\nپارامترها:\n- models: لیست مدل‌های فیلتر.\n- any_handler: آیا هر handler باید اجرا شود.\n- kwargs: آرگومان‌های اضافی.",
          "comments": [],
          "class_attributes": [
            {
              "name": "__name__",
              "value_repr": "'CustomHandlers'",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "models",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "kind": "kwonly",
                  "name": "any_handler",
                  "annotation": "bool",
                  "default": "False"
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "is_async",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی اینکه آیا تابع داده‌شده ناهمگام (async) است.\n\nپارامترها:\n- value: تابع برای بررسی.\n\nخروجی:\nTrue اگر تابع ناهمگام باشد، در غیر این صورت False.",
              "comments": []
            },
            {
              "name": "__call__",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "Dict",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "اجرای handler روی آپدیت داده‌شده.\n\nپارامترها:\n- update: دیکشنری آپدیت.\n- args: آرگومان‌های اضافی موقعیتی.\n- kwargs: آرگومان‌های اضافی کلیدی.\n\nخروجی:\nTrue اگر handler باید اجرا شود، در غیر این صورت False.",
              "comments": []
            }
          ]
        },
        {
          "name": "Handlers",
          "bases": [],
          "doc": "کلاس برای مدیریت و ایجاد handlerهای خاص.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "__eq__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "value",
                  "annotation": "object",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "بررسی برابری با کلاس پایه handlerها.\n\nپارامترها:\n- value: مقداری برای بررسی.\n\nخروجی:\nTrue اگر برابر با BaseHandlers باشد، در غیر این صورت False.",
              "comments": []
            },
            {
              "name": "__dir__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "List[str]",
              "doc": "دریافت لیست handlerهای مجاز.\n\nخروجی:\nلیست مرتب‌شده handlerهای مجاز.",
              "comments": []
            },
            {
              "name": "__call__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "Type['BaseHandlers']",
              "doc": "فراخوانی handler بر اساس نام.\n\nپارامترها:\n- name: نام handler.\n- args: آرگومان‌های اضافی موقعیتی.\n- kwargs: آرگومان‌های اضافی کلیدی.\n\nخروجی:\nکلاس handler ایجادشده.",
              "comments": []
            },
            {
              "name": "__getattr__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Type['BaseHandlers']",
              "doc": "دریافت handler ایجادشده دینامیک بر اساس نام.\n\nپارامترها:\n- name: نام handler.\n\nخروجی:\nکلاس handler ایجادشده.",
              "comments": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "create_handler",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "name",
              "annotation": "str",
              "default": "AUTHORIZED_HANDLERS"
            },
            {
              "kind": "arg",
              "name": "base",
              "annotation": "tuple",
              "default": "AUTHORIZED_HANDLERS"
            },
            {
              "kind": "arg",
              "name": "authorized_handlers",
              "annotation": "List[str]",
              "default": "AUTHORIZED_HANDLERS"
            },
            {
              "kind": "arg",
              "name": "exception",
              "annotation": "bool",
              "default": "AUTHORIZED_HANDLERS"
            },
            {
              "kind": "**kwargs",
              "name": "kwargs",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "Optional[Type['BaseHandlers']]",
          "doc": "ایجاد دینامیک یک handler بر اساس نام و کلاس پایه.\n\nپارامترها:\n- name: نام handler.\n- base: کلاس پایه برای handler.\n- authorized_handlers: لیست نام‌های handlerهای مجاز.\n- exception: آیا در صورت غیرمجاز بودن handler خطا پرتاب شود.\n- kwargs: آرگومان‌های اضافی برای تنظیم کلاس.\n\nخروجی:\nکلاس handler ایجادشده یا None در صورت غیرمجاز بودن.\n\nخطاها:\n- AttributeError: اگر handler غیرمجاز باشد و exception=True.",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.sync",
      "doc": "",
      "variables": [],
      "classes": [],
      "functions": [
        {
          "name": "async_to_sync",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "obj",
              "annotation": "",
              "default": null
            },
            {
              "kind": "arg",
              "name": "name",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "",
          "doc": "Wrap an asynchronous function or asynchronous generator method\nto make it synchronous.\n\nParameters:\n- obj: Object containing the method.\n- name: Name of the method to wrap.\n\nReturns:\nWrapped synchronous function or generator.",
          "comments": []
        },
        {
          "name": "wrap_methods",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "source",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "",
          "doc": "Wrap asynchronous methods in a class to make them synchronous.\n\nParameters:\n- source: Class containing asynchronous methods.",
          "comments": []
        },
        {
          "name": "wrap_types_methods",
          "async": false,
          "args": [],
          "return_annotation": "",
          "doc": "Wrap asynchronous methods in types' classes to make them synchronous.",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.network",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Network",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "HEADERS",
              "value_repr": "{'origin': 'https://m.rubika.ir', 'referer': 'https://m.rubika.ir/', 'content-type': 'application/json', 'connection': 'keep-alive'}",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "client",
                  "annotation": "'rubpy.Client'",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Network class initializition.\n\nParameters:\n- client: Instance of rubpy.Client.",
              "comments": []
            },
            {
              "name": "close",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Close the aiphttp.ClientSession",
              "comments": []
            },
            {
              "name": "get_dcs",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "max_retries",
                  "annotation": "int",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "backoff",
                  "annotation": "float",
                  "default": "3"
                }
              ],
              "return_annotation": "bool",
              "doc": "Retrieves API and WebSocket URLs with retry and exponential backoff.\n\nThis method fetches the data center configuration from Rubika's endpoint,\nsets the API and WebSocket URLs on the client instance, and handles network\nor server errors with retry logic.\n\nArgs:\n    max_retries (int, optional): Maximum number of retry attempts. Defaults to 3.\n    backoff (float, optional): Base delay in seconds for exponential backoff. Defaults to 1.0.\n\nReturns:\n    bool: True if the data center configuration was successfully retrieved.\n\nRaises:\n    NetworkError: If all retry attempts fail to fetch the data centers.",
              "comments": []
            },
            {
              "name": "request",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "url",
                  "annotation": "str",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "Dict",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "max_retries",
                  "annotation": "int",
                  "default": "3"
                },
                {
                  "kind": "arg",
                  "name": "backoff",
                  "annotation": "float",
                  "default": "3"
                }
              ],
              "return_annotation": "Dict",
              "doc": "Sends an HTTP POST request with retry logic and exponential backoff.\n\nThis method attempts to send a POST request to the specified URL using the\nprovided JSON data. If the request fails due to network issues or server errors,\nit retries up to `max_retries` times with a growing delay.\n\nArgs:\n    url (str): The target API endpoint.\n    data (dict): The JSON-serializable payload to send.\n    max_retries (int, optional): Maximum number of retry attempts. Defaults to 3.\n    backoff (float, optional): Base delay in seconds for exponential backoff. Defaults to 1.0.\n\nReturns:\n    dict: The parsed JSON response from the server.\n\nRaises:\n    NetworkError: If the request fails after all retry attempts.",
              "comments": []
            },
            {
              "name": "send",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "dict",
              "doc": "Send request to Rubika's API\n\nParameters:\n- kwargs: Request parameters\n\nReturns:\n- JSON-decoded response.",
              "comments": []
            },
            {
              "name": "handle_update",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "update",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Dispatches incoming updates to the registered handlers.\n\nThis method iterates over all registered client handlers and invokes the one\nwhose name matches the incoming update type. Handlers can be coroutine functions\nor regular functions (executed in a background thread). If a handler raises\n`StopHandler`, it halts further processing of that update.\n\nArgs:\n    name (str): The name/type of the incoming update (e.g. \"message\", \"chat\").\n    update (dict): The update payload received from the server.\n\nReturns:\n    None\n\nLogs:\n    - Errors during handler execution, including traceback.",
              "comments": []
            },
            {
              "name": "get_updates",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Continuously listens for updates from Rubika's WebSocket API,\nmaintaining connection with automatic reconnection logic.\n\nThis coroutine establishes a persistent WebSocket connection to Rubika,\nperforms handshake authentication, and listens for incoming messages.\nIf the connection drops or times out, it waits briefly and reconnects.\nIt also launches a background task to keep the socket alive.\n\nReturns:\n    None\n\nLogs:\n    - Warning on connection failures or errors during communication.",
              "comments": [
                "self.logger.error(f\"خطا در handler برای {name}: {e}\", extra={'data': update}, exc_info=True)"
              ]
            },
            {
              "name": "keep_socket",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Maintains the WebSocket connection by periodically sending pings\nand checking for chat updates.\n\nThis coroutine runs indefinitely, sending an empty JSON object\nto the server every 10 seconds to keep the connection alive. If the\nWebSocket is closed or an exception occurs, it logs a warning and retries.\n\nReturns:\n    None\n\nLogs:\n    - Warning if the connection check or ping fails.",
              "comments": []
            },
            {
              "name": "handle_text_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "msg_data",
                  "annotation": "Dict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "Handles incoming text messages received via WebSocket.\n\nThis method decrypts the incoming `data_enc` field using the client's key,\nextracts updates, and dispatches them asynchronously to the appropriate handler(s).\n\nArgs:\n    msg_data (dict): Parsed JSON dictionary received from the WebSocket.\n\nReturns:\n    None\n\nLogs:\n    - Debug message if `data_enc` is missing.\n    - Error message if decryption or handling fails.",
              "comments": []
            },
            {
              "name": "upload_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "file",
                  "annotation": "Union[str, bytes]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "mime",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "file_name",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chunk",
                  "annotation": "int",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "callback",
                  "annotation": "Optional[Callable[[int, int], Union[None, asyncio.Future]]]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "max_retries",
                  "annotation": "int",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "backoff",
                  "annotation": "float",
                  "default": "None"
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Uploads a file to Rubika with chunked transfer and retry logic.\n\nSupports both file path and raw bytes input. Uploads in chunks and\nprovides progress updates via optional callback. If the server requests\nreinitialization (e.g. due to expired upload credentials), it automatically\nresets and resumes the process.\n\nArgs:\n    file (str or bytes): File path or bytes to upload.\n    mime (str, optional): MIME type of the file. Defaults to file extension.\n    file_name (str, optional): Name of the file to assign. Required for bytes input.\n    chunk (int, optional): Chunk size in bytes. Defaults to 1MB.\n    callback (callable, optional): Function or coroutine for progress reporting.\n        Called with (total_size, uploaded_bytes).\n    max_retries (int, optional): Max retry attempts per chunk. Defaults to 3.\n    backoff (float, optional): Initial delay (in seconds) for exponential retry backoff. Defaults to 1.0.\n\nReturns:\n    Update: An object containing metadata about the uploaded file (dc_id, file_id, size, mime, etc.).\n\nRaises:\n    ValueError: If file path is invalid or file_name is missing for bytes input.\n    TypeError: If the file argument is neither str nor bytes.\n    Exception: If the upload fails after retries.",
              "comments": []
            },
            {
              "name": "download",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "dc_id",
                  "annotation": "int",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "file_id",
                  "annotation": "int",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "access_hash",
                  "annotation": "str",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "size",
                  "annotation": "int",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "chunk",
                  "annotation": "int",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "callback",
                  "annotation": "Optional[Callable[[int, int], Union[None, asyncio.Future]]]",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "gather",
                  "annotation": "bool",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "save_as",
                  "annotation": "Optional[str]",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "max_retries",
                  "annotation": "int",
                  "default": "131072"
                },
                {
                  "kind": "arg",
                  "name": "backoff",
                  "annotation": "float",
                  "default": "131072"
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "Union[bytes, str]",
              "doc": "Download a file from Rubika using its file ID and access hash.\n\nThis function supports downloading files either to memory (as bytes)\nor saving directly to disk. It also supports parallel downloading using\nasyncio.gather and provides retry logic with exponential backoff.\n\nArgs:\n    dc_id (int): Data center ID.\n    file_id (int): Unique identifier of the file.\n    access_hash (str): Access hash associated with the file.\n    size (int): Total size of the file in bytes.\n    chunk (int, optional): Size of each download chunk in bytes. Defaults to 131072 (128 KB).\n    callback (callable, optional): A function or coroutine called with (total_size, downloaded_size)\n        to report progress.\n    gather (bool, optional): If True, downloads chunks in parallel using asyncio.gather. Defaults to False.\n    save_as (str, optional): If specified, path to save the downloaded file. If None, returns file content.\n    max_retries (int, optional): Maximum number of retry attempts for each chunk. Defaults to 3.\n    backoff (float, optional): Base delay (in seconds) for exponential backoff. Defaults to 1.0.\n\nReturns:\n    bytes or str: The downloaded file content as bytes (if `save_as` is None),\n                or the path to the saved file (if `save_as` is specified).\n\nRaises:\n    None explicitly, but logs warnings and errors internally on failed retries or callback exceptions.",
              "comments": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "capitalize",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "تبدیل رشته snake_case به CamelCase.\n\nپارامترها:\n- text: رشته با فرمت snake_case.\n\nخروجی:\nرشته با فرمت CamelCase.",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.utils",
      "doc": "",
      "variables": [
        {
          "name": "RUBIKA_LINK_PATTERN",
          "value_repr": "re.compile('\\\\brubika\\\\.ir\\\\b')",
          "comments": [
            "Define regular expressions for patterns"
          ]
        },
        {
          "name": "GROUP_LINK_PATTERN",
          "value_repr": "re.compile('https://rubika\\\\.ir/joing/[A-Z0-9]+')",
          "comments": [
            "Define regular expressions for patterns"
          ]
        },
        {
          "name": "CHANNEL_LINK_PATTERN",
          "value_repr": "re.compile('https://rubika\\\\.ir/joing/[A-Z0-9]+')",
          "comments": [
            "Define regular expressions for patterns"
          ]
        },
        {
          "name": "USERNAME_PATTERN",
          "value_repr": "re.compile('@([a-zA-Z0-9_]{3,32})')",
          "comments": []
        }
      ],
      "classes": [],
      "functions": [
        {
          "name": "is_rubika_link",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "doc": "Check if the given string contains a Rubika link.\n\n:param string: Input string to check.\n:return: True if the string contains a Rubika link, False otherwise.",
          "comments": [
            "Functions to check patterns"
          ]
        },
        {
          "name": "is_group_link",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "doc": "Check if the given string contains a Rubika group link.\n\n:param string: Input string to check.\n:return: True if the string contains a Rubika group link, False otherwise.",
          "comments": []
        },
        {
          "name": "is_channel_link",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "doc": "Check if the given string contains a Rubika channel link.\n\n:param string: Input string to check.\n:return: True if the string contains a Rubika channel link, False otherwise.",
          "comments": []
        },
        {
          "name": "is_username",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "doc": "Check if the given string contains a Rubika username.\n\n:param string: Input string to check.\n:return: True if the string contains a Rubika username, False otherwise.",
          "comments": []
        },
        {
          "name": "get_rubika_links",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "list",
          "doc": "Extract Rubika links from the given string.\n\n:param string: Input string to extract links from.\n:return: List of Rubika links found in the string.",
          "comments": [
            "Functions to extract matches"
          ]
        },
        {
          "name": "get_group_links",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "list",
          "doc": "Extract Rubika group links from the given string.\n\n:param string: Input string to extract group links from.\n:return: List of Rubika group links found in the string.",
          "comments": []
        },
        {
          "name": "get_channel_links",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "list",
          "doc": "Extract Rubika channel links from the given string.\n\n:param string: Input string to extract channel links from.\n:return: List of Rubika channel links found in the string.",
          "comments": []
        },
        {
          "name": "get_usernames",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "string",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "list",
          "doc": "Extract Rubika usernames from the given string.\n\n:param string: Input string to extract usernames from.\n:return: List of Rubika usernames found in the string.",
          "comments": []
        },
        {
          "name": "Bold",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Make the text bold.\n\n:param text: Input text to be formatted.\n:return: Bold formatted text.",
          "comments": [
            "Text formatting functions"
          ]
        },
        {
          "name": "Italic",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Make the text italic.\n\n:param text: Input text to be formatted.\n:return: Italic formatted text.",
          "comments": []
        },
        {
          "name": "Underline",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Underline the text.\n\n:param text: Input text to be formatted.\n:return: Underlined text.",
          "comments": []
        },
        {
          "name": "Strike",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Add strike-through to the text.\n\n:param text: Input text to be formatted.\n:return: Text with strike-through.",
          "comments": []
        },
        {
          "name": "Spoiler",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Format the text as a spoiler.\n\n:param text: Input text to be formatted.\n:return: Spoiler formatted text.",
          "comments": []
        },
        {
          "name": "Code",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Format the text as code.\n\n:param text: Input text to be formatted.\n:return: Code formatted text.",
          "comments": []
        },
        {
          "name": "Mention",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            },
            {
              "kind": "arg",
              "name": "object_guid",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Mention a user with a specific object GUID.\n\n:param text: Text to be mentioned.\n:param object_guid: GUID of the mentioned object.\n:return: Mention formatted text.",
          "comments": []
        },
        {
          "name": "HyperLink",
          "async": false,
          "args": [
            {
              "kind": "arg",
              "name": "text",
              "annotation": "str",
              "default": null
            },
            {
              "kind": "arg",
              "name": "link",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "doc": "Create a hyperlink with the provided text and link.\n\n:param text: Text for the hyperlink.\n:param link: URL for the hyperlink.\n:return: Hyperlink formatted text.",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.bots.client",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Bot",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "BASE_URL",
              "value_repr": "'https://messengerg2b1.iranlms.ir/v3/'",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "client",
                  "annotation": "'rubpy.Client'",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "execute",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "_send_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "get_me",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "Bot",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "text",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_poll",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "question",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "options",
                  "annotation": "List[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_location",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "latitude",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "longitude",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_sticker",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "sticker_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_contact",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "first_name",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "last_name",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "phone_number",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "upload",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "get_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "set_commands",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "bot_commands",
                  "annotation": "List[BotCommand]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "edit_chat_keypad",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Keypad",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "remove_chat_keypad",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "update_bot_endpoint",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "token",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "Literal['ReceiveUpdate', 'ReceiveInlineMessage', 'ReceiveQuery', 'GetSelectionItem', 'SearchSelectionItems']",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "forward_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "from_chat_id",
                  "annotation": "str",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "to_chat_id",
                  "annotation": "str",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "False"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": [
                "... (previous code)"
              ]
            },
            {
              "name": "edit_message_text",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "edit_message_keypad",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Keypad",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "delete_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "send_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "token",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "file_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "disable_notification",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "inline_keypad",
                  "annotation": "Optional[Keypad]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad_type",
                  "annotation": "Literal[None, 'New', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "request_send_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "Literal['File', 'Image', 'Voice', 'Music', 'Gif']",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "upload",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "get_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "",
              "comments": []
            },
            {
              "name": "set_commands",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "bot_commands",
                  "annotation": "List[BotCommand]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "edit_chat_keypad",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_keypad",
                  "annotation": "Keypad",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "remove_chat_keypad",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "update_bot_endpoint",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "Literal['ReceiveUpdate', 'ReceiveInlineMessage', 'ReceiveQuery', 'GetSelectionItem', 'SearchSelectionItems']",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.__init__",
      "doc": "",
      "variables": [],
      "classes": [],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.bot",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Bot",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.__init__",
      "doc": "",
      "variables": [],
      "classes": [],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.aux_data",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AuxData",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Button",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_calendar",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonCalendar",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.bot_command",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "BotCommand",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_number_picker",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonNumberPicker",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_location",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonLocation",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_selection",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonSelection",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_selection_item",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonSelectionItem",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_string_picker",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonStringPicker",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.button_textbox",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ButtonTextbox",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Chat",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.contact_message",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ContactMessage",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.file",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "File",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.forwarded_from",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ForwardedFrom",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.inline_message",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "InlineMessage",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.keypad",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Keypad",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.keypad_row",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "KeypadRow",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.location",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Location",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.live_location",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "LiveLocation",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.messaage_text_update",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "messageTextUpdate",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.message",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Message",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.message_keypad_update",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "MessageKeypadUpdate",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.payment_status",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "PaymentStatus",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.poll",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Poll",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.poll_status",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "PollStatus",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.sticker",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Sticker",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.bots.types.update",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Update",
          "bases": [
            "BaseModel"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.crypto.crypto",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Crypto",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "AES_IV",
              "value_repr": "b'\\x00' * 16",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "decode_auth",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "auth",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "Decode an auth string by applying character substitutions.\n\nArgs:\n    auth (str): The input auth string.\n\nReturns:\n    str: The decoded auth string.",
              "comments": []
            },
            {
              "name": "passphrase",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "cls",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "auth",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Generate a passphrase from an auth string.\n\nArgs:\n    auth (str): The input auth string.\n\nReturns:\n    str: The generated passphrase.",
              "comments": []
            },
            {
              "name": "secret",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "cls",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "length",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Generate a random secret of the given length.\n\nArgs:\n    length (int): Length of the secret.\n\nReturns:\n    str: The generated secret.",
              "comments": []
            },
            {
              "name": "decrypt",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "cls",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "key",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Decrypt data using AES encryption.\n\nArgs:\n    data (str): The encrypted data.\n    key (str): The encryption key.\n\nReturns:\n    dict: The decrypted data as a dictionary.",
              "comments": []
            },
            {
              "name": "encrypt",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "cls",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "key",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Encrypt data using AES encryption.\n\nArgs:\n    data (str or dict): The data to be encrypted.\n    key (str): The encryption key.\n\nReturns:\n    str: The encrypted data as a string.",
              "comments": []
            },
            {
              "name": "sign",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "pkcs1_15",
                  "annotation": "'pkcs1_15.new'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "doc": "Sign data using an RSA private key.\n\nArgs:\n    private_key (str): The RSA private key.\n    data (str): The data to be signed.\n\nReturns:\n    str: The base64-encoded signature.",
              "comments": []
            },
            {
              "name": "create_keys",
              "async": false,
              "args": [],
              "return_annotation": "tuple",
              "doc": "Generate RSA public and private keys.\n\nReturns:\n    tuple: A tuple containing the base64-encoded public key and the private key.",
              "comments": []
            },
            {
              "name": "decrypt_RSA_OAEP",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "private_key",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "data",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Decrypt data using RSA OAEP encryption.\n\nArgs:\n    private_key (str): The RSA private key.\n    data (str): The encrypted data.\n\nReturns:\n    str: The decrypted data as a string.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.crypto.__init__",
      "doc": "",
      "variables": [],
      "classes": [],
      "functions": []
    },
    {
      "module": "rubpy.enums.__init__",
      "doc": "",
      "variables": [],
      "classes": [],
      "functions": []
    },
    {
      "module": "rubpy.enums.chat_access_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Access",
          "bases": [
            "str",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "ChangeInfo",
              "value_repr": "'ChangeInfo'",
              "comments": []
            },
            {
              "name": "PinMessages",
              "value_repr": "'PinMessages'",
              "comments": []
            },
            {
              "name": "DeleteGlobalAllMessages",
              "value_repr": "'DeleteGlobalAllMessages'",
              "comments": []
            },
            {
              "name": "BanMember",
              "value_repr": "'BanMember'",
              "comments": []
            },
            {
              "name": "SetAdmin",
              "value_repr": "'SetAdmin'",
              "comments": []
            },
            {
              "name": "SetJoinLink",
              "value_repr": "'SetJoinLink'",
              "comments": []
            },
            {
              "name": "SetMemberAccess",
              "value_repr": "'SetMemberAccess'",
              "comments": []
            },
            {
              "name": "ViewMembers",
              "value_repr": "'ViewMembers'",
              "comments": []
            },
            {
              "name": "ViewAdmins",
              "value_repr": "'ViewAdmins'",
              "comments": []
            },
            {
              "name": "SendMessages",
              "value_repr": "'SendMessages'",
              "comments": []
            },
            {
              "name": "AddMember",
              "value_repr": "'AddMember'",
              "comments": []
            },
            {
              "name": "ViewInfo",
              "value_repr": "'ViewInfo'",
              "comments": []
            },
            {
              "name": "ViewMessages",
              "value_repr": "'ViewMessages'",
              "comments": []
            },
            {
              "name": "DeleteLocalMessages",
              "value_repr": "'DeleteLocalMessages'",
              "comments": []
            },
            {
              "name": "EditMyMessages",
              "value_repr": "'EditMyMessages'",
              "comments": []
            },
            {
              "name": "DeleteGlobalMyMessages",
              "value_repr": "'DeleteGlobalMyMessages'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.chat_action",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ChatAction",
          "bases": [
            "str",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "TYPING",
              "value_repr": "'Typing'",
              "comments": []
            },
            {
              "name": "UPLOADING",
              "value_repr": "'Uploading'",
              "comments": []
            },
            {
              "name": "RECORD_AUDIO",
              "value_repr": "'Recording'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.chat_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ChatType",
          "bases": [],
          "doc": "Chat type enumeration used in :obj:`~pyrogram.types.Chat`.",
          "comments": [],
          "class_attributes": [
            {
              "name": "PRIVATE",
              "value_repr": "'Private'",
              "comments": []
            },
            {
              "name": "BOT",
              "value_repr": "'Bot'",
              "comments": []
            },
            {
              "name": "GROUP",
              "value_repr": "'Group'",
              "comments": []
            },
            {
              "name": "CHANNEL",
              "value_repr": "'Channel'",
              "comments": []
            },
            {
              "name": "SERVICE",
              "value_repr": "'Service'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.message_media_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "MessageMediaType",
          "bases": [
            "str",
            "Enum"
          ],
          "doc": "Message media type",
          "comments": [],
          "class_attributes": [
            {
              "name": "AUDIO",
              "value_repr": "'Music'",
              "comments": []
            },
            {
              "name": "MUSIC",
              "value_repr": "'Music'",
              "comments": []
            },
            {
              "name": "DOCUMENT",
              "value_repr": "'File'",
              "comments": []
            },
            {
              "name": "PHOTO",
              "value_repr": "'Image'",
              "comments": []
            },
            {
              "name": "STICKER",
              "value_repr": "'Sticker'",
              "comments": []
            },
            {
              "name": "VIDEO",
              "value_repr": "'Video'",
              "comments": []
            },
            {
              "name": "VOICE",
              "value_repr": "'Voice'",
              "comments": []
            },
            {
              "name": "CONTACT",
              "value_repr": "'Contact'",
              "comments": []
            },
            {
              "name": "LOCATION",
              "value_repr": "'Location'",
              "comments": []
            },
            {
              "name": "POLL",
              "value_repr": "'Poll'",
              "comments": []
            },
            {
              "name": "GIF",
              "value_repr": "'Gif'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.parse_mode",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ParseMode",
          "bases": [
            "str",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "HTML",
              "value_repr": "'html'",
              "comments": []
            },
            {
              "name": "MARKDOWN",
              "value_repr": "'markdown'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.poll_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "PollType",
          "bases": [],
          "doc": "Poll type enumeration",
          "comments": [],
          "class_attributes": [
            {
              "name": "QUIZ",
              "value_repr": "'Quiz'",
              "comments": []
            },
            {
              "name": "REGULAR",
              "value_repr": "'Regular'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.reaction_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ReactionType",
          "bases": [
            "int",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "RED_HEART",
              "value_repr": "1",
              "comments": []
            },
            {
              "name": "FIRE",
              "value_repr": "4",
              "comments": []
            },
            {
              "name": "SMILING_FACE_WITH_HEARTS",
              "value_repr": "5",
              "comments": []
            },
            {
              "name": "CLAPPING_HANDS",
              "value_repr": "6",
              "comments": []
            },
            {
              "name": "IRAN",
              "value_repr": "7",
              "comments": []
            },
            {
              "name": "BEAMING_FACE",
              "value_repr": "8",
              "comments": []
            },
            {
              "name": "THINKING_FACE",
              "value_repr": "9",
              "comments": []
            },
            {
              "name": "EXPLODING_HEAD",
              "value_repr": "10",
              "comments": []
            },
            {
              "name": "SCREAMING_FACE",
              "value_repr": "11",
              "comments": []
            },
            {
              "name": "FACE_WITH_SYMBOLS_ON_MOUTH",
              "value_repr": "12",
              "comments": []
            },
            {
              "name": "CRYING_FACE",
              "value_repr": "13",
              "comments": []
            },
            {
              "name": "CELEBRATION",
              "value_repr": "14",
              "comments": []
            },
            {
              "name": "PARTY_POPPER",
              "value_repr": "15",
              "comments": []
            },
            {
              "name": "STAR_STRUCK",
              "value_repr": "16",
              "comments": []
            },
            {
              "name": "FACE_VOMITING",
              "value_repr": "17",
              "comments": []
            },
            {
              "name": "PILE_OF_POO",
              "value_repr": "18",
              "comments": []
            },
            {
              "name": "FOLDED_HANDS",
              "value_repr": "19",
              "comments": []
            },
            {
              "name": "OKAY",
              "value_repr": "20",
              "comments": []
            },
            {
              "name": "DOVE_OF_PEACE",
              "value_repr": "21",
              "comments": []
            },
            {
              "name": "CLOWN_FACE",
              "value_repr": "22",
              "comments": []
            },
            {
              "name": "YAWNING_FACE",
              "value_repr": "23",
              "comments": []
            },
            {
              "name": "WOOZY_FACE",
              "value_repr": "24",
              "comments": []
            },
            {
              "name": "SMILING_FACE_WITH_HEART_EYES",
              "value_repr": "25",
              "comments": []
            },
            {
              "name": "WHALE",
              "value_repr": "26",
              "comments": []
            },
            {
              "name": "HEART_ON_FIRE",
              "value_repr": "27",
              "comments": []
            },
            {
              "name": "NEW_MOON_FACE",
              "value_repr": "28",
              "comments": []
            },
            {
              "name": "HOT_DOG",
              "value_repr": "29",
              "comments": []
            },
            {
              "name": "HUNDRED_POINTS",
              "value_repr": "30",
              "comments": []
            },
            {
              "name": "ROLLING_ON_THE_FLOOR_LAUGHING",
              "value_repr": "31",
              "comments": []
            },
            {
              "name": "HIGH_VOLTAGE",
              "value_repr": "32",
              "comments": []
            },
            {
              "name": "BANANA",
              "value_repr": "33",
              "comments": []
            },
            {
              "name": "TROPHY",
              "value_repr": "34",
              "comments": []
            },
            {
              "name": "BROKEN_HEART",
              "value_repr": "35",
              "comments": []
            },
            {
              "name": "FACE_WITH_RAISED_EYEBROW",
              "value_repr": "36",
              "comments": []
            },
            {
              "name": "NEUTRAL_FACE",
              "value_repr": "37",
              "comments": []
            },
            {
              "name": "STRAWBERRY",
              "value_repr": "38",
              "comments": []
            },
            {
              "name": "KISS_MARK",
              "value_repr": "39",
              "comments": []
            },
            {
              "name": "SMILING_FACE_WITH_HORNS",
              "value_repr": "40",
              "comments": []
            },
            {
              "name": "SLEEPING",
              "value_repr": "41",
              "comments": []
            },
            {
              "name": "LOUDLY_CRYING_FACE",
              "value_repr": "42",
              "comments": []
            },
            {
              "name": "NERD_FACE",
              "value_repr": "43",
              "comments": []
            },
            {
              "name": "GHOST",
              "value_repr": "44",
              "comments": []
            },
            {
              "name": "MAN_TECHNOLOGIST",
              "value_repr": "45",
              "comments": []
            },
            {
              "name": "EYES",
              "value_repr": "46",
              "comments": []
            },
            {
              "name": "JACK_O_LANTERN",
              "value_repr": "47",
              "comments": []
            },
            {
              "name": "SEE_NO_EVIL_MONKEY",
              "value_repr": "48",
              "comments": []
            },
            {
              "name": "SMILING_FACE_WITH_HALO",
              "value_repr": "49",
              "comments": []
            },
            {
              "name": "FEARFUL_FACE",
              "value_repr": "50",
              "comments": []
            },
            {
              "name": "HANDSHAKE",
              "value_repr": "51",
              "comments": []
            },
            {
              "name": "WRITING_HANDS",
              "value_repr": "52",
              "comments": []
            },
            {
              "name": "HUGGING_FACE",
              "value_repr": "53",
              "comments": []
            },
            {
              "name": "SANTA_CLAUS",
              "value_repr": "54",
              "comments": []
            },
            {
              "name": "CHRISTMAS_TREE",
              "value_repr": "55",
              "comments": []
            },
            {
              "name": "SNOWMAN",
              "value_repr": "56",
              "comments": []
            },
            {
              "name": "NAIL_POLISH",
              "value_repr": "57",
              "comments": []
            },
            {
              "name": "ZANY_FACE",
              "value_repr": "58",
              "comments": []
            },
            {
              "name": "MOAI",
              "value_repr": "59",
              "comments": []
            },
            {
              "name": "COOL_BUTTON",
              "value_repr": "60",
              "comments": []
            },
            {
              "name": "HEART_WITH_ARROW",
              "value_repr": "61",
              "comments": []
            },
            {
              "name": "HEAR_NO_EVIL_MONKEY",
              "value_repr": "62",
              "comments": []
            },
            {
              "name": "UNICORN",
              "value_repr": "63",
              "comments": []
            },
            {
              "name": "FACE_BLOWING_A_KISS",
              "value_repr": "64",
              "comments": []
            },
            {
              "name": "PILL",
              "value_repr": "65",
              "comments": []
            },
            {
              "name": "SPEAK_NO_EVIL_MONKEY",
              "value_repr": "66",
              "comments": []
            },
            {
              "name": "SMILING_FACE_WITH_SUNGLASSES",
              "value_repr": "67",
              "comments": []
            },
            {
              "name": "ALIEN_MONSTER",
              "value_repr": "68",
              "comments": []
            },
            {
              "name": "SHRUGGING_MAN",
              "value_repr": "69",
              "comments": []
            },
            {
              "name": "SHRUGGING_PERSON",
              "value_repr": "70",
              "comments": []
            },
            {
              "name": "SHRUGGING_WOMAN",
              "value_repr": "71",
              "comments": []
            },
            {
              "name": "RAGE",
              "value_repr": "72",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.enums.report_type",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ReportType",
          "bases": [
            "int",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "OTHER",
              "value_repr": "100",
              "comments": []
            },
            {
              "name": "VIOLENCE",
              "value_repr": "101",
              "comments": []
            },
            {
              "name": "SPAM",
              "value_repr": "102",
              "comments": []
            },
            {
              "name": "PORNOGRAPHY",
              "value_repr": "103",
              "comments": []
            },
            {
              "name": "CHILD_ABUSE",
              "value_repr": "104",
              "comments": []
            },
            {
              "name": "COPYRIGHT",
              "value_repr": "105",
              "comments": []
            },
            {
              "name": "FISHING",
              "value_repr": "106",
              "comments": []
            }
          ],
          "methods": []
        },
        {
          "name": "ReportTypeObject",
          "bases": [
            "str",
            "Enum"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "OBJECT",
              "value_repr": "'Object'",
              "comments": []
            },
            {
              "name": "MESSAGE",
              "value_repr": "'Message'",
              "comments": []
            }
          ],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Methods",
          "bases": [
            "Advanced",
            "Utilities",
            "Users",
            "Auth",
            "Messages",
            "Chats",
            "Groups",
            "Decorators",
            "Contacts",
            "Settings",
            "Stickers",
            "Channels",
            "Exctras",
            "Gifs",
            "VoiceCall"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.advanced.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Advanced",
          "bases": [
            "Builder",
            "VoiceChatPlayer"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.advanced.voice_chat_player",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "VoiceChatConnection",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "__init__",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "peer_connection",
                  "annotation": "'RTCPeerConnection'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "media_player",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "audio_track",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_guid",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "client",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "stop",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "pause",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "resume",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "replace_track",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "new_media_path",
                  "annotation": "str",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "loop",
                  "annotation": "bool",
                  "default": "False"
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "get_stats",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            },
            {
              "name": "get_info",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        },
        {
          "name": "VoiceChatPlayer",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [
            {
              "name": "logger",
              "value_repr": "logging.getLogger('VoiceChatPlayer')",
              "comments": []
            }
          ],
          "methods": [
            {
              "name": "heartbeat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "speaking",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "doc": "",
              "comments": []
            },
            {
              "name": "voice_chat_player",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "media",
                  "annotation": "pathlib.Path",
                  "default": null
                }
              ],
              "return_annotation": "VoiceChatConnection | None",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.advanced.build",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Builder",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "builder",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "name",
                  "annotation": "str",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "tmp_session",
                  "annotation": "bool",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "encrypt",
                  "annotation": "bool",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "dict",
                  "annotation": "bool",
                  "default": "False"
                },
                {
                  "kind": "arg",
                  "name": "input",
                  "annotation": "dict",
                  "default": "False"
                }
              ],
              "return_annotation": "Union[Update, dict]",
              "doc": "Build and send a request to the Rubika API.\n\nArgs:\n    - name (str): The API method name.\n    - tmp_session (bool, optional): Whether to use a temporary session. Defaults to False.\n    - encrypt (bool, optional): Whether to encrypt the data. Defaults to True.\n    - dict (bool, optional): Return the result as a dictionary. Defaults to False.\n    - input (dict, optional): The input data for the API method. Defaults to None.\n\nReturns:\n    - Union[rubpy.types.Update, dict]: Result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.auth.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Auth",
          "bases": [
            "RegisterDevice",
            "SendCode",
            "SignIn"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.auth.send_code",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SendCode",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "send_code",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "phone_number",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "pass_key",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "send_type",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.auth.register_device",
      "doc": "",
      "variables": [
        {
          "name": "system_versions",
          "value_repr": "{'Windows NT 10.0': 'Windows 10', 'Windows NT 6.2': 'Windows 8', 'Windows NT 6.1': 'Windows 7', 'Windows NT 6.0': 'Windows Vista', 'Windows NT 5.1': 'windows XP', 'Windows NT 5.0': 'Windows 2000', 'Mac': 'Mac/iOS', 'X11': 'UNIX', 'Linux': 'Linux'}",
          "comments": []
        }
      ],
      "classes": [
        {
          "name": "RegisterDevice",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "register_device",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_android",
          "async": true,
          "args": [
            {
              "kind": "arg",
              "name": "user_agent",
              "annotation": "",
              "default": null
            },
            {
              "kind": "arg",
              "name": "lang_code",
              "annotation": "",
              "default": null
            },
            {
              "kind": "arg",
              "name": "app_version",
              "annotation": "",
              "default": null
            },
            {
              "kind": "*args",
              "name": "args",
              "annotation": "",
              "default": null
            },
            {
              "kind": "**kwargs",
              "name": "kwargs",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "",
          "doc": "",
          "comments": []
        },
        {
          "name": "get_browser",
          "async": true,
          "args": [
            {
              "kind": "arg",
              "name": "user_agent",
              "annotation": "",
              "default": null
            },
            {
              "kind": "arg",
              "name": "lang_code",
              "annotation": "",
              "default": null
            },
            {
              "kind": "arg",
              "name": "app_version",
              "annotation": "",
              "default": null
            },
            {
              "kind": "*args",
              "name": "args",
              "annotation": "",
              "default": null
            },
            {
              "kind": "**kwargs",
              "name": "kwargs",
              "annotation": "",
              "default": null
            }
          ],
          "return_annotation": "",
          "doc": "",
          "comments": []
        }
      ]
    },
    {
      "module": "rubpy.methods.auth.sign_in",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SignIn",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "sign_in",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "phone_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "phone_number",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "phone_code_hash",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "public_key",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Channels",
          "bases": [
            "AddChannel",
            "AddChannelMembers",
            "BanChannelMember",
            "ChannelPreviewByJoinLink",
            "CheckChannelUsername",
            "CreateChannelVoiceChat",
            "DiscardChannelVoiceChat",
            "EditChannelInfo",
            "GetBannedGroupMembers",
            "GetChannelAdminAccessList",
            "GetChannelAdminMembers",
            "GetChannelAllMembers",
            "GetChannelInfo",
            "GetChannelLink",
            "JoinChannelAction",
            "JoinChannelByLink",
            "RemoveChannel",
            "SetChannelLink",
            "SetChannelVoiceChatSetting",
            "UpdateChannelUsername",
            "SeenChannelMessages"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.add_channel",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddChannel",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_channel",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "description",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "member_guids",
                  "annotation": "Union[str, list]",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Create a new channel and add members if specified.\n\nParameters:\n- title (str): The title of the new channel.\n- description (str, optional): The description of the new channel.\n- member_guids (Union[str, list], optional): The unique identifier(s) of the member(s) to be added to the new channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.add_channel_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddChannelMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_channel_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "member_guids",
                  "annotation": "Union[str, list]",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Add members to a channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n- member_guids (Union[str, list]): The unique identifier(s) of the member(s) to be added.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.ban_channel_member",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "BanChannelMember",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "ban_channel_member",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "str",
                  "default": "'Set'"
                }
              ],
              "return_annotation": "Update",
              "doc": "Ban or unban a member in a channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n- member_guid (str): The unique identifier of the member to be banned or unbanned.\n- action (str, optional): The action to perform, can be 'Set' (ban) or 'Unset' (unban). Defaults to 'Set'.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.channel_preview_by_join_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ChannelPreviewByJoinLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "channel_preview_by_join_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "link",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get a preview of a channel using its join link.\n\nParameters:\n- link (str): The join link or a link containing the channel's hash.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.create_channel_voice_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "CreateChannelVoiceChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "create_channel_voice_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Create a voice chat for a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.check_channel_username",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "CheckChannelUsername",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "check_channel_username",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "username",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Check the availability of a username for a channel.\n\nParameters:\n- username (str): The username to check.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.discard_channel_voice_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DiscardChannelVoiceChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "discard_channel_voice_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Discard a voice chat in a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- voice_chat_id (str): The ID of the voice chat to discard.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.edit_channel_info",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "EditChannelInfo",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "edit_channel_info",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "description",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "channel_type",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "sign_messages",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_reaction_setting",
                  "annotation": "Optional[dict]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_history_for_new_members",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Edit information of a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- title (str, optional): The new title of the channel.\n- description (str, optional): The new description of the channel.\n- channel_type (str, optional): The new type of the channel.\n- sign_messages (str, optional): Whether to sign messages in the channel.\n- chat_reaction_setting (dict, optional): The new chat reaction setting.\n- chat_history_for_new_members (str, optional): The chat history visibility for new members.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_banned_group_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetBannedGroupMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_banned_group_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Get a list of banned members in a group.\n\nParameters:\n- group_guid (str): The GUID of the group.\n- start_id (str, optional): The ID to start retrieving banned members from.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_channel_admin_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChannelAdminMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_channel_admin_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Get the list of admin members in a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- start_id (str, optional): The ID to start fetching from. Defaults to None.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_channel_all_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChannelAllMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_channel_all_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "search_text",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Get all members in a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- search_text (str, optional): Text to search for in members. Defaults to None.\n- start_id (str, optional): The ID to start fetching from. Defaults to None.\n\nReturns:\nrubpy.types.InChatMembers: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_channel_admin_access_list",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChannelAdminAccessList",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_channel_admin_access_list",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get the admin access list for a specific member in a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- member_guid (str): The GUID of the member.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_channel_info",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChannelInfo",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_channel_info",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get information about a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.get_channel_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChannelLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_channel_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get the join link of a channel.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.join_channel_action",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "JoinChannelAction",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "join_channel_action",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "Literal['Join', 'Remove', 'Archive']",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Perform an action on a channel, such as joining, removing, or archiving.\n\nParameters:\n- channel_guid (str): The GUID of the channel.\n- action (Literal['Join', 'Remove', 'Archive']): The action to perform on the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.join_channel_by_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "JoinChannelByLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "join_channel_by_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "link",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Join a channel using its invite link.\n\nParameters:\n- link (str): The invite link or hash of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.seen_channel_messages",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SeenChannelMessages",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "seen_channel_messages",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "min_id",
                  "annotation": "Union[int, str]",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "max_id",
                  "annotation": "Union[int, str]",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Mark channel messages as seen within a specific range.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n- min_id (Union[int, str]): The minimum message ID to mark as seen.\n- max_id (Union[int, str]): The maximum message ID to mark as seen.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.remove_channel",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "RemoveChannel",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "remove_channel",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Remove a channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.set_channel_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetChannelLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_channel_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Set a custom link for the channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.set_channel_voice_chat_setting",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetChannelVoiceChatSetting",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_channel_voice_chat_setting",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Set the title for a voice chat in a channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n- voice_chat_id (str): The unique identifier of the voice chat.\n- title (str, optional): The new title for the voice chat.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.channels.update_channel_username",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "UpdateChannelUsername",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "update_channel_username",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "channel_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "username",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Update the username of a channel.\n\nParameters:\n- channel_guid (str): The unique identifier of the channel.\n- username (str): The new username for the channel.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Chats",
          "bases": [
            "DeleteAvatar",
            "DeleteChatHistory",
            "GetAbsObjects",
            "GetAvatars",
            "GetChats",
            "GetChatsUpdates",
            "GetLinkFromAppUrl",
            "UploadAvatar",
            "SetActionChat",
            "SendChatActivity",
            "SeenChats",
            "SearchChatMessages"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.delete_avatar",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DeleteAvatar",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "delete_avatar",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "avatar_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Delete an avatar.\n\nParameters:\n- object_guid (str): The unique identifier of the object (e.g., user, chat) that owns the avatar.\n- avatar_id (str): The identifier of the avatar to be deleted.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.delete_chat_history",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DeleteChatHistory",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "delete_chat_history",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "last_message_id",
                  "annotation": "Union[str, int]",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Delete chat history up to a certain message.\n\nParameters:\n- object_guid (str): The unique identifier of the object (e.g., user, chat) for which chat history will be deleted.\n- last_message_id (Union[str, int]): The identifier of the last message to keep in the chat history.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.get_abs_objects",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetAbsObjects",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_abs_objects",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guids",
                  "annotation": "Union[str, list]",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get absolute objects based on their unique identifiers.\n\nParameters:\n- object_guids (Union[str, list]): The unique identifiers of the objects to retrieve.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.get_avatars",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetAvatars",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_avatars",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Get avatars of a specific object.\n\nParameters:\n- object_guid (str): The unique identifier of the object to retrieve avatars for.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.get_chats",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChats",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_chats",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Get a list of chats.\n\nParameters:\n- start_id (Optional[str]): The ID to start from. If not provided, it starts from the\n  beginning.\n\nReturns:\nrubpy.types.Update: The result of the API call, representing a list of chats.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.get_chats_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetChatsUpdates",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_chats_updates",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "state",
                  "annotation": "Optional[Union[str, int]]",
                  "default": "None"
                }
              ],
              "return_annotation": "Update",
              "doc": "Get updates for chats.\n\nParameters:\n- state (Optional[Union[str, int]]): State parameter for syncing updates. If not provided,\n  it uses the current time minus 150 seconds.\n\nReturns:\nrubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.get_link_from_app_url",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetLinkFromAppUrl",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_link_from_app_url",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "app_url",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Update",
              "doc": "Retrieves a link from an application URL.\n\nArgs:\n    app_url (str): The application URL.\n\nReturns:\n    rubpy.types.Update: The link data.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.search_chat_messages",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SearchChatMessages",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "search_chat_messages",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Text'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Text'"
                },
                {
                  "kind": "arg",
                  "name": "search_text",
                  "annotation": "str",
                  "default": "'Text'"
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "str",
                  "default": "'Text'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Searches for chat messages based on the specified criteria.\n\nArgs:\n    object_guid (str): The GUID of the chat or channel.\n    search_text (str): The text to search for in messages.\n    type (str, optional): The type of search, can be 'Text' or 'Hashtag'. Defaults to 'Text'.\n\nReturns:\n    rubpy.types.Update: The search results.\n\nRaises:\n    ValueError: If the `type` argument is not valid.\n    rubpy.exceptions.APIError: If the API request fails.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.seen_chats",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SeenChats",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "seen_chats",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "seen_list",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Marks multiple chats as seen.\n\nArgs:\n    seen_list (dict): A dictionary containing chat GUIDs and their last seen message IDs.\n\nReturns:\n    rubpy.types.Update: The result of the operation.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.set_action_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetActionChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_action_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Mute'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Mute'"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "str",
                  "default": "'Mute'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Set the action for a chat, such as muting or unmuting.\n\nArgs:\n    object_guid (str): The GUID of the chat.\n    action (str, optional): The action to be set. Defaults to 'Mute'.\n\nReturns:\n    rubpy.types.Update: The result of the operation.\n\nRaises:\n    ValueError: If the `action` argument is not one of `[\"Mute\", \"Unmute\"]`.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.send_chat_activity",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SendChatActivity",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "send_chat_activity",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Typing'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Typing'"
                },
                {
                  "kind": "arg",
                  "name": "activity",
                  "annotation": "str",
                  "default": "'Typing'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Sends a chat activity, such as typing, uploading, or recording.\n\nArgs:\n    object_guid (str): The GUID of the chat.\n    activity (str, optional): The type of activity. Defaults to 'Typing'.\n\nReturns:\n    rubpy.types.Update: The result of the operation.\n\nRaises:\n    ValueError: If the `activity` argument is not one of `[\"Typing\", \"Uploading\", \"Recording\"]`.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.chats.upload_avatar",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "UploadAvatar",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "upload_avatar",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "image",
                  "annotation": "Union[Path, bytes]",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "Uploads an avatar image for a specified object (user, group, or chat).\n\nArgs:\n    object_guid (str): The GUID of the object for which the avatar is being uploaded.\n    image (Union[Path, bytes]): The image file or bytes to be used as the avatar.\n    *args, **kwargs: Additional arguments to be passed to the `upload` method.\n\nReturns:\n    rubpy.types.Update: The result of the avatar upload operation.\n\nRaises:\n    Any exceptions that might occur during the avatar upload process.\n\nNote:\n    - If `object_guid` is 'me', 'cloud', or 'self', it will be replaced with the client's GUID.\n    - If `image` is a string (path to a file), the file name is extracted from the path.\n      Otherwise, a default file name ('rubpy.jpg') is used.\n    - The `upload` method is used internally to handle the file upload process.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.contacts.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Contacts",
          "bases": [
            "GetContactsUpdates",
            "AddAddressBook",
            "DeleteContact",
            "GetContacts"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.contacts.add_address_book",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddAddressBook",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_address_book",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "''"
                },
                {
                  "kind": "arg",
                  "name": "phone",
                  "annotation": "str",
                  "default": "''"
                },
                {
                  "kind": "arg",
                  "name": "first_name",
                  "annotation": "str",
                  "default": "''"
                },
                {
                  "kind": "arg",
                  "name": "last_name",
                  "annotation": "str",
                  "default": "''"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Adds a contact to the client's address book.\n\nArgs:\n    phone (str): The phone number of the contact to be added.\n    first_name (str): The first name of the contact.\n    last_name (str, optional): The last name of the contact. Defaults to an empty string.\n\nReturns:\n    rubpy.types.Update: The result of the address book addition operation.\n\nRaises:\n    Any exceptions that might occur during the address book addition process.\n\nNote:\n    - The `phone` parameter should be a valid phone number.\n    - The `first_name` and `last_name` parameters represent the name of the contact.\n      If the contact has no last name, `last_name` can be an empty string.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.contacts.delete_contact",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DeleteContact",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "delete_contact",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "user_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Deletes a contact from the client's address book.\n\nArgs:\n    user_guid (str): The GUID (Globally Unique Identifier) of the contact to be deleted.\n\nReturns:\n    rubpy.types.Update: The result of the contact deletion operation.\n\nRaises:\n    Any exceptions that might occur during the contact deletion process.\n\nNote:\n    - The `user_guid` parameter should be the GUID of the contact to be deleted.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.contacts.get_contacts",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetContacts",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_contacts",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "Optional[Union[str, int]]",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get a list of contacts.\n\nArgs:\n    self (\"rubpy.Client\"): The rubpy client.\n    start_id (Optional[Union[str, int]], optional): Start ID for pagination. Defaults to None.\n\nReturns:\n    rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.contacts.get_contacts_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetContactsUpdates",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_contacts_updates",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "round(time()) - 150"
                },
                {
                  "kind": "arg",
                  "name": "state",
                  "annotation": "Optional[Union[str, int]]",
                  "default": "round(time()) - 150"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get updates related to contacts.\n\nArgs:\n    self (rubpy.Client): The rubpy client.\n    state (Optional[Union[str, int]], optional):\n        The state parameter to filter updates. Defaults to `round(time()) - 150`.\n\nReturns:\n    rubpy.types.Update: The update related to contacts.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Decorators",
          "bases": [
            "OnMessageUpdates",
            "OnChatUpdates",
            "OnRemoveNotifications",
            "OnShowActivities",
            "OnShowNotifications"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.on_chat_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "OnChatUpdates",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "on_chat_updates",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.on_message_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "OnMessageUpdates",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "on_message_updates",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.on_remove_notifications",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "OnRemoveNotifications",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "on_remove_notifications",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.on_show_activities",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "OnShowActivities",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "on_show_activities",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.decorators.on_show_notifications",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "OnShowNotifications",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "on_show_notifications",
              "async": false,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "*args",
                  "name": "args",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "**kwargs",
                  "name": "kwargs",
                  "annotation": "",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.ban_member",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "BanMember",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "ban_member",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Ban a member from a group or channel.\n\nArgs:\n    object_guid (str): The GUID of the group or channel.\n    member_guid (str): The GUID of the member to be banned.\n\nReturns:\n    rubpy.types.Update: The update after banning the member.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.action_on_join_request",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ActionOnJoinRequest",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "action_on_join_request",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Accept'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Accept'"
                },
                {
                  "kind": "arg",
                  "name": "user_guid",
                  "annotation": "str",
                  "default": "'Accept'"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "Literal['Accept', 'Reject']",
                  "default": "'Accept'"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "doc": "انجام عملیات بر روی درخواست عضویت (تأیید یا رد).\n\nArgs:\n    object_guid (str): شناسه گروه یا کانال.\n    user_guid (str): شناسه کاربری درخواست‌دهنده.\n    action (Literal['Accept', 'Reject']): عملیات مورد نظر (پیش‌فرض 'Accept').\n\nReturns:\n    dict: پاسخ API پس از انجام عملیات.\n\nRaises:\n    ValueError: اگر action غیرمجاز باشد.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Exctras",
          "bases": [
            "GetObjectByUsername",
            "SearchGlobalObjects",
            "GetProfileLinkItems",
            "BanMember",
            "GetInfo",
            "Join",
            "GetRelatedObjects",
            "GetTranscription",
            "UserIsAdmin",
            "ReportObject",
            "TranscribeVoice",
            "GetJoinLinks",
            "CreateJoinLink",
            "ActionOnJoinRequest",
            "GetJoinRequests"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.create_join_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "CreateJoinLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "create_join_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "expire_time",
                  "annotation": "Optional[int]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "request_needed",
                  "annotation": "bool",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "usage_limit",
                  "annotation": "int",
                  "default": "None"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "doc": "ساخت لینک دعوت برای گروه یا کانال.\n\nArgs:\n    object_guid (str): شناسه گروه یا کانال.\n    expire_time (Optional[int]): زمان انقضا لینک به ثانیه (اختیاری).\n    request_needed (bool): آیا پذیرش درخواست عضویت دستی باشد یا خیر.\n    title (Optional[str]): عنوان لینک (اختیاری).\n    usage_limit (int): محدودیت تعداد استفاده از لینک.\n\nReturns:\n    dict: پاسخ API شامل لینک ایجاد شده.\n\nRaises:\n    ValueError: اگر مقدار `request_needed` بولی نباشد.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_info",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetInfo",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_info",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "username",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get information about a user, group, or channel.\n\nArgs:\n    object_guid (str, optional): The GUID of the object (user, group, or channel).\n    username (str, optional): The username of the object.\n\nReturns:\n    rubpy.types.Update: The update containing information about the object.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_join_links",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetJoinLinks",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_join_links",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict",
              "doc": "دریافت لینک‌های پیوستن به یک گروه/کانال خاص بر اساس object_guid.\n\nArgs:\n    object_guid (str): شناسه گروه یا کانال\n\nReturns:\n    dict: پاسخ API شامل لینک‌های پیوستن",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_join_requests",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetJoinRequests",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_join_requests",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict",
              "doc": "دریافت درخواست‌های عضویت در گروه یا کانال مشخص‌شده.\n\nArgs:\n    object_guid (str): شناسه‌ی گروه یا کانال\n\nReturns:\n    dict: پاسخ API شامل درخواست‌های عضویت",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_object_by_username",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetObjectByUsername",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_object_by_username",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "username",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get an object (user, group, or channel) by its username.\n\nArgs:\n    username (str): The username of the object.\n\nReturns:\n    rubpy.types.Update: The update containing information about the object.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_profile_link_items",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetProfileLinkItems",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_profile_link_items",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get profile link items for a given object.\n\nArgs:\n    object_guid (str): The GUID of the object.\n\nReturns:\n    rubpy.types.Update: The update containing information about profile link items.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_related_objects",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetRelatedObjects",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_related_objects",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get related objects for a given object.\n\nArgs:\n    object_guid (str): The GUID of the object.\n\nReturns:\n    rubpy.types.Update: The update containing information about related objects.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.get_transcription",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetTranscription",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_transcription",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "Union[str, int]",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "transcription_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get transcription for a specific message.\n\nArgs:\n    message_id (Union[str, int]): The ID of the message.\n    transcription_id (str): The ID of the transcription.\n\nReturns:\n    rubpy.types.Update: The update containing the requested transcription.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.join",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Join",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "join_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "chat",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Join a chat using its identifier or link.\n\nArgs:\n    chat (str): The identifier or link of the chat.\n\nReturns:\n    rubpy.types.Update: The update containing information about the joined chat.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.leave_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "LeaveChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "leave_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Leave a chat (channel or group).\n\nArgs:\n    object_guid (str): The identifier of the chat (channel or group).\n\nReturns:\n    rubpy.types.Update: The update containing information about leaving the chat.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.report_object",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ReportObject",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "report_object",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "report_type",
                  "annotation": "'rubpy.enums.ReportType'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "description",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "report_type_object",
                  "annotation": "'rubpy.enums.ReportTypeObject'",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Report an object (user, channel, group, etc.) for a specific reason.\n\nArgs:\n    object_guid (str): The identifier of the object to be reported.\n    report_type (rubpy.enums.ReportType): The type of report.\n    description (str, optional): Additional description for the report.\n    report_type_object (str, optional): The type of object being reported.\n\nReturns:\n    rubpy.types.Update: The update containing information about the report.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.search_global_objects",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SearchGlobalObjects",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "search_global_objects",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "search_text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Search for global objects (users, channels, etc.) based on the given search text.\n\nArgs:\n    search_text (str): The text to search for.\n\nReturns:\n    rubpy.types.Update: The update containing search results.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.transcribe_voice",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "TranscribeVoice",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "transcribe_voice",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Transcribes voice messages.\n\nParameters:\n    - object_guid (str): The GUID of the object (chat, channel, or group) containing the voice message.\n    - message_id (str): The ID of the voice message.\n\nReturns:\n    rubpy.types.Update: The transcription result.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.extras.user_is_admin",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "UserIsAdmin",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "user_is_admin",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "user_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "doc": "Checks if a user is an admin in a group or channel.\n\nArgs:\n    object_guid (str): The GUID of the group or channel.\n    user_guid (str): The GUID of the user.\n\nReturns:\n    bool: True if the user is an admin, False otherwise.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.gif.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Gifs",
          "bases": [
            "GetMyGifSet",
            "AddToMyGifSet",
            "RemoveFromMyGifSet"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.gif.get_my_gif_set",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetMyGifSet",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_my_gif_set",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Gets the user's personal GIF set.\n\nReturns:\n    rubpy.types.Update: Information about the user's GIF set.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.gif.add_to_my_gif_set",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddToMyGifSet",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_to_my_gif_set",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Adds a GIF message to the user's personal GIF set.\n\nArgs:\n    object_guid (str): The GUID of the chat or channel.\n    message_id (str): The ID of the GIF message.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.gif.remove_from_my_gif_set",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "RemoveFromMyGifSet",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "remove_from_my_gif_set",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "file_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Removes a GIF from the user's personal GIF set.\n\nArgs:\n    file_id (str): The file ID of the GIF to be removed.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Groups",
          "bases": [
            "AddGroup",
            "AddGroupMembers",
            "BanGroupMember",
            "CreateGroupVoiceChat",
            "DeleteNoAccessGroupChat",
            "EditGroupInfo",
            "GetBannedGroupMembers",
            "GetGroupAdminAccessList",
            "GetGroupAdminMembers",
            "GetGroupAllMembers",
            "GetGroupDefaultAccess",
            "GetGroupInfo",
            "GetGroupLink",
            "GetGroupMentionList",
            "GetGroupVoiceChatUpdates",
            "GroupPreviewByJoinLink",
            "JoinGroup",
            "LeaveGroup",
            "LeaveGroupVoiceChat",
            "RemoveGroup",
            "SetGroupAdmin",
            "SetGroupDefaultAccess",
            "SetGroupLink",
            "SetGroupVoiceChatSetting",
            "GetGroupOnlineCount"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.add_group",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddGroup",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_group",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "member_guids",
                  "annotation": "Union[str, List[str]]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "description",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Add a new group.\n\nArgs:\n- title (str): The title of the group.\n- member_guids (Union[str, List[str]]): A single member GUID or a list of member GUIDs to be added to the group.\n- description (Optional[str]): Description of the group (optional).\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.add_group_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AddGroupMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "add_group_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "member_guids",
                  "annotation": "Union[str, list]",
                  "default": null
                }
              ],
              "return_annotation": "'rubpy.types.Update'",
              "doc": "Adds one or more members to a group.\n\nArgs:\n    group_guid (str): The GUID of the group.\n    member_guids (Union[str, list]): A single member GUID or a list of member GUIDs to be added.\n\nReturns:\n    rubpy.types.Update: An update object indicating the result of the operation.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.create_group_voice_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "CreateGroupVoiceChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "create_group_voice_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Create a voice chat in a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.ban_group_member",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "BanGroupMember",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "ban_group_member",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": "'Set'"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "Optional[str]",
                  "default": "'Set'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Ban or unban a member from a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- member_guid (str): The GUID of the member to be banned or unbanned.\n- action (str): The action to perform. Should be either 'Set' (ban) or 'Unset' (unban).\n\nReturns:\n- rubpy.types.Update: The result of the API call.\n\nRaises:\n- ValueError: If the `action` argument is not 'Set' or 'Unset'.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.delete_no_access_group_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DeleteNoAccessGroupChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "delete_no_access_group_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Delete a group chat that has no access.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.edit_group_info",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "EditGroupInfo",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "edit_group_info",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "description",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "slow_mode",
                  "annotation": "Optional[str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "event_messages",
                  "annotation": "Optional[bool]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_reaction_setting",
                  "annotation": "Optional[Dict[str, Union[str, int]]]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "chat_history_for_new_members",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Edit the information of a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- title (Optional[str]): The new title for the group.\n- description (Optional[str]): The new description for the group.\n- slow_mode (Optional[str]): The new slow mode setting for the group.\n- event_messages (Optional[bool]): Enable or disable event messages for the group.\n- chat_reaction_setting (Optional[Dict[str, Union[str, int]]]): The new chat reaction setting.\n- chat_history_for_new_members (Optional[str]): The new chat history setting for new members.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_banned_group_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetBannedGroupMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_banned_group_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the list of banned members in a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- start_id (Optional[str]): The starting ID for fetching results.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_admin_access_list",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupAdminAccessList",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_admin_access_list",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the admin access list for a member in a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- member_guid (str): The GUID of the member for whom admin access is being checked.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_admin_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupAdminMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_admin_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the list of admin members in a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- start_id (str, optional): The starting ID for pagination. Defaults to None.\n\nReturns:\n- rubpy.types.Update: The result of the API call.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_all_members",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupAllMembers",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_all_members",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "search_text",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get all members of a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- search_text (str, optional): Search text for filtering members. Defaults to None.\n- start_id (str, optional): The starting ID for pagination. Defaults to None.\n\nReturns:\n- InChatMembers: Object containing information about the group members.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_default_access",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupDefaultAccess",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_default_access",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the default access settings for a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object containing information about the default access settings.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_info",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupInfo",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_info",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get information about a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object containing information about the group.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the link associated with a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object containing the group link.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_mention_list",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupMentionList",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_mention_list",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "search_mention",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the mention list for a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- search_mention (str, optional): Search text for mentions.\n\nReturns:\n- rubpy.types.Update: Update object containing the group mention list.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_online_count",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupOnlineCount",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_online_count",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "",
              "doc": "",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.get_group_voice_chat_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetGroupVoiceChatUpdates",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_group_voice_chat_updates",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "state",
                  "annotation": "int",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get voice chat updates for a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- voice_chat_id (str): The ID of the voice chat.\n- state (int, optional): The state for updates. If not provided, it defaults to the current time.\n\nReturns:\n- rubpy.types.Update: Update object containing the group voice chat updates.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.group_preview_by_join_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GroupPreviewByJoinLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "group_preview_by_join_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "link",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get group preview by join link.\n\nArgs:\n- link (str): The join link or hash link.\n\nReturns:\n- rubpy.types.Update: Update object containing the group preview information.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.join_group",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "JoinGroup",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "join_group",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "link",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Join a group using the provided link.\n\nArgs:\n- link (str): The group link or hash link.\n\nReturns:\n- rubpy.types.Update: Update object confirming the group join action.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.leave_group",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "LeaveGroup",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "leave_group",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Leave a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object confirming the leave group action.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.leave_group_voice_chat",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "LeaveGroupVoiceChat",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "leave_group_voice_chat",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Leave a voice chat in a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- voice_chat_id (str): The ID of the voice chat.\n\nReturns:\n- rubpy.types.Update: Update object confirming the leave voice chat action.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.remove_group",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "RemoveGroup",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "remove_group",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Remove a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object confirming the removal of the group.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.set_group_admin",
      "doc": "",
      "variables": [
        {
          "name": "ALLOWEDS",
          "value_repr": "['SetAdmin', 'BanMember', 'ChangeInfo', 'PinMessages', 'SetJoinLink', 'SetMemberAccess', 'DeleteGlobalAllMessages']",
          "comments": []
        }
      ],
      "classes": [
        {
          "name": "SetGroupAdmin",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_group_admin",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'SetAdmin'"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "'SetAdmin'"
                },
                {
                  "kind": "arg",
                  "name": "member_guid",
                  "annotation": "str",
                  "default": "'SetAdmin'"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "str",
                  "default": "'SetAdmin'"
                },
                {
                  "kind": "arg",
                  "name": "access_list",
                  "annotation": "Union[str, list]",
                  "default": "'SetAdmin'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Set or unset a member as a group admin.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- member_guid (str): The GUID of the member.\n- action (str): The action to perform, either 'SetAdmin' or 'UnsetAdmin'.\n- access_list (Union[str, list]): List of allowed actions. Default is an empty list.\n\nReturns:\n- rubpy.types.Update: Update object confirming the change in admin status.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.set_group_default_access",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetGroupDefaultAccess",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_group_default_access",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "access_list",
                  "annotation": "Union[str, list]",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Set default access for a group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- access_list (Union[str, list]): List of allowed actions.\n\nReturns:\n- rubpy.types.Update: Update object confirming the change in default access.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.set_group_link",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetGroupLink",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_group_link",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Set private link for group.\n\nArgs:\n- group_guid (str): The GUID of the group.\n\nReturns:\n- rubpy.types.Update: Update object confirming the change in default access.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.groups.set_group_voice_chat_setting",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "SetGroupVoiceChatSetting",
          "bases": [],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "set_group_voice_chat_setting",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "group_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "voice_chat_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "title",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Set group voice chat setting.\n\nArgs:\n- group_guid (str): The GUID of the group.\n- voice_chat_id (str): The voice chat ID.\n- title (str): Title of voice chat, Defualt is None.\n\nReturns:\n- rubpy.types.Update: Update object confirming the change in default access.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.__init__",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Messages",
          "bases": [
            "AutoDeleteMessage",
            "CreatePoll",
            "DeleteMessages",
            "EditMessage",
            "ForwardMessages",
            "GetMessagesByID",
            "GetMessagesInterval",
            "GetPollOptionVoters",
            "GetPollStatus",
            "RequestSendFile",
            "SendMessage",
            "SetPinMessage",
            "VotePoll",
            "SendDocument",
            "SendGif",
            "SendMusic",
            "SendVideo",
            "SendVoice",
            "SendPhoto",
            "SendVideoMessage",
            "ActionOnMessageReaction",
            "RemoveReaction",
            "Reaction",
            "GetMessageShareUrl",
            "GetMessagesUpdates",
            "SendSticker"
          ],
          "doc": "",
          "comments": [],
          "class_attributes": [],
          "methods": []
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.action_on_message_reaction",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ActionOnMessageReaction",
          "bases": [],
          "doc": "Provides a method to perform actions on reactions to a specific message.\n\nMethods:\n- action_on_message_reaction: Perform actions on reactions to a specific message.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "action_on_message_reaction",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "reaction_id",
                  "annotation": "int",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "action",
                  "annotation": "Literal['Add', 'Remove']",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Perform actions on reactions to a specific message.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the message (e.g., user, group, channel).\n- message_id (str): The ID of the message.\n- reaction_id (int): The ID of the reaction.\n- action (Literal['Add', 'Remove']): The action to perform on the reaction.\n\nReturns:\n- rubpy.types.Update: The updated information after performing the action on the message reaction.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.auto_delete_message",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "AutoDeleteMessage",
          "bases": [],
          "doc": "Provides a method to automatically delete a message after a specified time.\n\nMethods:\n- auto_delete_message: Automatically delete a message after a specified time.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "auto_delete_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "time",
                  "annotation": "Union[float, int]",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Automatically delete a message after a specified time.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the message (e.g., user, group, channel).\n- message_id (str): The ID of the message to be deleted.\n- time (Union[float, int]): The time delay (in seconds) before deleting the message.\n\nReturns:\n- rubpy.types.Update: The updated information after deleting the message.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.create_poll",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "CreatePoll",
          "bases": [],
          "doc": "Provides a method to create a poll message.\n\nMethods:\n- create_poll: Create a poll message with the specified parameters.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "create_poll",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "question",
                  "annotation": "str",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "options",
                  "annotation": "list",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "str",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "is_anonymous",
                  "annotation": "bool",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "allows_multiple_answers",
                  "annotation": "bool",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "correct_option_index",
                  "annotation": "Union[int, str]",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "explanation",
                  "annotation": "str",
                  "default": "'Regular'"
                },
                {
                  "kind": "arg",
                  "name": "reply_to_message_id",
                  "annotation": "Union[str, int]",
                  "default": "'Regular'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Create a poll message with the specified parameters.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the poll (e.g., user, group, channel).\n- question (str): The question for the poll.\n- options (list): A list of string values representing the poll options.\n- type (str): The type of the poll, can be 'Regular' or 'Quiz'.\n- is_anonymous (bool): Whether the poll is anonymous or not.\n- allows_multiple_answers (bool): Whether the poll allows multiple answers or not.\n- correct_option_index (Union[int, str]): The index or ID of the correct option for quiz-type polls.\n- explanation (str): An explanation for the correct answer in quiz-type polls.\n- reply_to_message_id (Union[str, int]): The ID of the message to reply to.\n\nReturns:\n- rubpy.types.Update: The updated information after creating the poll.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.delete_messages",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "DeleteMessages",
          "bases": [],
          "doc": "Provides a method to delete messages.\n\nMethods:\n- delete_messages: Delete specified messages associated with the given object.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "delete_messages",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "'Global'"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "'Global'"
                },
                {
                  "kind": "arg",
                  "name": "message_ids",
                  "annotation": "Union[str, list]",
                  "default": "'Global'"
                },
                {
                  "kind": "arg",
                  "name": "type",
                  "annotation": "str",
                  "default": "'Global'"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Delete specified messages associated with the given object.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the messages (e.g., user, group, channel).\n- message_ids (Union[str, list]): The ID or list of IDs of the messages to be deleted.\n- type (str): The type of deletion, can be 'Global' or 'Local'.\n\nReturns:\n- rubpy.types.Update: The updated information after deleting the messages.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.edit_message",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "EditMessage",
          "bases": [],
          "doc": "Provides a method to edit a message.\n\nMethods:\n- edit_message: Edit the specified message associated with the given object.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "edit_message",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "Union[int, str]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "text",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "parse_mode",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Edit the specified message associated with the given object.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the message (e.g., user, group, channel).\n- message_id (Union[int, str]): The ID of the message to be edited.\n- text (str): The new text content for the message.\n- parse_mode (str): The parse mode for the text, can be 'markdown' or 'html'. Defaults to None.\n\nReturns:\n- rubpy.types.Update: The updated information after editing the message.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.forward_messages",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "ForwardMessages",
          "bases": [],
          "doc": "Provides a method to forward messages from one object to another.\n\nMethods:\n- forward_messages: Forward specified messages from one object to another.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "forward_messages",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "from_object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "to_object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_ids",
                  "annotation": "Union[str, int, list]",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Forward specified messages from one object to another.\n\nParameters:\n- from_object_guid (str): The GUID of the source object from which messages are forwarded.\n- to_object_guid (str): The GUID of the destination object to which messages are forwarded.\n- message_ids (Union[str, int, list]): The IDs of the messages to be forwarded. Can be a single ID or a list of IDs.\n\nReturns:\n- rubpy.types.Update: The updated information after forwarding the messages.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_message_share_url",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetMessageShareUrl",
          "bases": [],
          "doc": "Provides a method to get the shareable URL of a specific message.\n\nMethods:\n- get_message_url: Get the shareable URL of a specific message.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_message_url",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the shareable URL of a specific message.\n\nParameters:\n- object_guid (str): The GUID of the object to which the message belongs.\n- message_id (str): The ID of the message for which to retrieve the shareable URL.\n\nReturns:\n- rubpy.types.Update: The shareable URL of the specified message.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_messages_by_id",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetMessagesByID",
          "bases": [],
          "doc": "Provides a method to retrieve messages by their IDs.\n\nMethods:\n- get_messages_by_id: Retrieve messages by their IDs.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_messages_by_id",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_ids",
                  "annotation": "Union[str, list]",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Retrieve messages by their IDs.\n\nParameters:\n- object_guid (str): The GUID of the object to which the messages belong.\n- message_ids (Union[str, list]): The ID or list of IDs of the messages to retrieve.\n\nReturns:\n- rubpy.types.Update: The retrieved messages identified by their IDs.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_messages_interval",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetMessagesInterval",
          "bases": [],
          "doc": "Provides a method to retrieve messages in an interval around a middle message ID.\n\nMethods:\n- get_messages_interval: Retrieve messages in an interval around a middle message ID.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_messages_interval",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "middle_message_id",
                  "annotation": "Union[int, str]",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Retrieve messages in an interval around a middle message ID.\n\nParameters:\n- object_guid (str): The GUID of the object to which the messages belong.\n- middle_message_id (Union[int, str]): The middle message ID around which the interval is determined.\n\nReturns:\n- rubpy.types.Update: The retrieved messages in the specified interval.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_messages_updates",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetMessagesUpdates",
          "bases": [],
          "doc": "Provides a method to get message updates for a specific object.\n\nMethods:\n- get_messages_updates: Get message updates for a specific object.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_messages_updates",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "round(time()) - 150"
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": "round(time()) - 150"
                },
                {
                  "kind": "arg",
                  "name": "state",
                  "annotation": "int",
                  "default": "round(time()) - 150"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get message updates for a specific object.\n\nParameters:\n- object_guid (str): The GUID of the object for which updates are requested.\n- state (int): The state at which updates are requested. Defaults to a timestamp approximately 150 seconds ago.\n\nReturns:\n- rubpy.types.Update: The message updates for the specified object.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_poll_option_voters",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetPollOptionVoters",
          "bases": [],
          "doc": "Provides a method to get voters for a specific poll option.\n\nMethods:\n- get_poll_option_voters: Get voters for a specific poll option.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_poll_option_voters",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "poll_id",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "selection_index",
                  "annotation": "Union[str, int]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "start_id",
                  "annotation": "Optional[str]",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get voters for a specific poll option.\n\nParameters:\n- poll_id (str): The ID of the poll for which voters are requested.\n- selection_index (Union[str, int]): The index of the poll option for which voters are requested.\n- start_id (Optional[str]): The ID from which to start fetching voters. Defaults to None.\n\nReturns:\n- rubpy.types.Update: The voters for the specified poll option.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.get_poll_status",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "GetPollStatus",
          "bases": [],
          "doc": "Provides a method to get the status of a specific poll.\n\nMethods:\n- get_poll_status: Get the status of a specific poll.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "get_poll_status",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "poll_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Get the status of a specific poll.\n\nParameters:\n- poll_id (str): The ID of the poll for which the status is requested.\n\nReturns:\n- rubpy.types.Update: The status of the specified poll.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.reaction",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "Reaction",
          "bases": [],
          "doc": "Provides a method to add a reaction to a specific message.\n\nMethods:\n- reaction: Add a reaction to a specific message.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "reaction",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "reaction_id",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Add a reaction to a specific message.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the message.\n- message_id (str): The ID of the message to which the reaction will be added.\n- reaction_id (int): The ID of the reaction to be added.\n\nReturns:\n- rubpy.types.Update: The update indicating the success of adding the reaction.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.remove_reaction",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "RemoveReaction",
          "bases": [],
          "doc": "Provides a method to remove a reaction from a specific message.\n\nMethods:\n- remove_reaction: Remove a reaction from a specific message.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "remove_reaction",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "object_guid",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "message_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "kind": "arg",
                  "name": "reaction_id",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Remove a reaction from a specific message.\n\nParameters:\n- object_guid (str): The GUID of the object associated with the message.\n- message_id (str): The ID of the message from which the reaction will be removed.\n- reaction_id (int): The ID of the reaction to be removed.\n\nReturns:\n- rubpy.types.Update: The update indicating the success of removing the reaction.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "module": "rubpy.methods.messages.request_send_file",
      "doc": "",
      "variables": [],
      "classes": [
        {
          "name": "RequestSendFile",
          "bases": [],
          "doc": "Provides a method to request sending a file.\n\nMethods:\n- request_send_file: Request sending a file.\n\nAttributes:\n- self (rubpy.Client): The rubpy client instance.",
          "comments": [],
          "class_attributes": [],
          "methods": [
            {
              "name": "request_send_file",
              "async": true,
              "args": [
                {
                  "kind": "arg",
                  "name": "self",
                  "annotation": "'rubpy.Client'",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "file_name",
                  "annotation": "str",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "size",
                  "annotation": "Union[str, int, float]",
                  "default": "None"
                },
                {
                  "kind": "arg",
                  "name": "mime",
                  "annotation": "str",
                  "default": "None"
                }
              ],
              "return_annotation": "rubpy.types.Update",
              "doc": "Request sending a file.\n\nParameters:\n- file_name (str): The name of the file to be sent.\n- size (Union[str, int, float]): The size of the file to be sent.\n- mime (str, optional): The MIME type of the file. If None, it will be derived from the file name.\n\nReturns:\n- rubpy.types.Update: The update indicating the success of the file sending request.",
              "comments": []
            }
          ]
        }
      ],
      "functions": []
    }
  ]
}